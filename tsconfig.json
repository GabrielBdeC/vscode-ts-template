{
  "extends": "@tsconfig/recommended/tsconfig.json",
  "ts-node": {
    "transpileOnly": false,
    "files": true,
  },
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"],
  "compilerOptions": {
    "rootDir": "src" /* Specify the root folder within your source files. */,
    "sourceMap": true /* Create source map files for emitted JavaScript files. */,
    "outDir": "dist" /* Specify an output folder for all emitted files. */,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true /* Create sourcemaps for d.ts files. */,
    // Strict mode
    "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noImplicitThis": true, /* Enable error reporting when 'this' is given the type 'any'. */
    "strictNullChecks": true, /* When type checking, take into account 'null' and 'undefined'. */
    "strictBindCallApply": true, /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    "strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictPropertyInitialization": true, /* Check for class properties that are declared but not set in the constructor. */
    "useUnknownInCatchVariables": true, /* Default catch clause variables as 'unknown' instead of 'any'. */
    // No unused code
    "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true, /* Raise an error when a function parameter isn't read. */
    "allowUnusedLabels": false, /* Disable error reporting for unused labels. */
    "allowUnreachableCode": false, /* Disable error reporting for unreachable code. */
    // No implicit code
    "noImplicitOverride": true, /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // Others
    "noUncheckedIndexedAccess": true, /* Add 'undefined' to a type when accessed using an index. */
    "noPropertyAccessFromIndexSignature": true, /* Enforces using indexed accessors for keys declared using an indexed type. */
    "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */
    "exactOptionalPropertyTypes": true, /* Interpret optional property types as written, rather than adding 'undefined'. */
    "forceConsistentCasingInFileNames": true,
  }
}